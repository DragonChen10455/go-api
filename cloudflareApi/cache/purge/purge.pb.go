// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: proto/purge.proto

package purge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PurgeRequestCloudflare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey    string   `protobuf:"bytes,1,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	ApiEmail  string   `protobuf:"bytes,2,opt,name=apiEmail,proto3" json:"apiEmail,omitempty"`
	ZoneId    string   `protobuf:"bytes,3,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
	PurgeList []string `protobuf:"bytes,4,rep,name=purgeList,proto3" json:"purgeList,omitempty"`
}

func (x *PurgeRequestCloudflare) Reset() {
	*x = PurgeRequestCloudflare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_purge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeRequestCloudflare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeRequestCloudflare) ProtoMessage() {}

func (x *PurgeRequestCloudflare) ProtoReflect() protoreflect.Message {
	mi := &file_proto_purge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeRequestCloudflare.ProtoReflect.Descriptor instead.
func (*PurgeRequestCloudflare) Descriptor() ([]byte, []int) {
	return file_proto_purge_proto_rawDescGZIP(), []int{0}
}

func (x *PurgeRequestCloudflare) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *PurgeRequestCloudflare) GetApiEmail() string {
	if x != nil {
		return x.ApiEmail
	}
	return ""
}

func (x *PurgeRequestCloudflare) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *PurgeRequestCloudflare) GetPurgeList() []string {
	if x != nil {
		return x.PurgeList
	}
	return nil
}

type PurgeRequestCloudflareEverything struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey   string `protobuf:"bytes,1,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	ApiEmail string `protobuf:"bytes,2,opt,name=apiEmail,proto3" json:"apiEmail,omitempty"`
	ZoneId   string `protobuf:"bytes,3,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
}

func (x *PurgeRequestCloudflareEverything) Reset() {
	*x = PurgeRequestCloudflareEverything{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_purge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeRequestCloudflareEverything) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeRequestCloudflareEverything) ProtoMessage() {}

func (x *PurgeRequestCloudflareEverything) ProtoReflect() protoreflect.Message {
	mi := &file_proto_purge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeRequestCloudflareEverything.ProtoReflect.Descriptor instead.
func (*PurgeRequestCloudflareEverything) Descriptor() ([]byte, []int) {
	return file_proto_purge_proto_rawDescGZIP(), []int{1}
}

func (x *PurgeRequestCloudflareEverything) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *PurgeRequestCloudflareEverything) GetApiEmail() string {
	if x != nil {
		return x.ApiEmail
	}
	return ""
}

func (x *PurgeRequestCloudflareEverything) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

type PurgeReplyCloudflare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PurgeReplyCloudflare) Reset() {
	*x = PurgeReplyCloudflare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_purge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeReplyCloudflare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeReplyCloudflare) ProtoMessage() {}

func (x *PurgeReplyCloudflare) ProtoReflect() protoreflect.Message {
	mi := &file_proto_purge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeReplyCloudflare.ProtoReflect.Descriptor instead.
func (*PurgeReplyCloudflare) Descriptor() ([]byte, []int) {
	return file_proto_purge_proto_rawDescGZIP(), []int{2}
}

func (x *PurgeReplyCloudflare) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_proto_purge_proto protoreflect.FileDescriptor

var file_proto_purge_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x41,
	0x70, 0x69, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x75, 0x72, 0x67, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x16, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a,
	0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x72, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x72, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x20, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x45, 0x76, 0x65,
	0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x7a,
	0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x14, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x98, 0x02, 0x0a, 0x0f, 0x50, 0x75, 0x72, 0x67, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x77, 0x0a, 0x0f, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x31, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x70, 0x75, 0x72, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x1a, 0x2f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x70, 0x75, 0x72, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x22, 0x00,
	0x12, 0x8b, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x72, 0x67, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66,
	0x6c, 0x61, 0x72, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x75, 0x72, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72,
	0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0x2f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x70, 0x75, 0x72, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x22, 0x00, 0x42, 0x4b,
	0x0a, 0x1e, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66,
	0x6c, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x75, 0x72, 0x67, 0x65,
	0x42, 0x0a, 0x70, 0x75, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1b,
	0x2e, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x41, 0x70, 0x69, 0x2f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_purge_proto_rawDescOnce sync.Once
	file_proto_purge_proto_rawDescData = file_proto_purge_proto_rawDesc
)

func file_proto_purge_proto_rawDescGZIP() []byte {
	file_proto_purge_proto_rawDescOnce.Do(func() {
		file_proto_purge_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_purge_proto_rawDescData)
	})
	return file_proto_purge_proto_rawDescData
}

var file_proto_purge_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_purge_proto_goTypes = []interface{}{
	(*PurgeRequestCloudflare)(nil),           // 0: cloudflareApi.cache.purge.PurgeRequestCloudflare
	(*PurgeRequestCloudflareEverything)(nil), // 1: cloudflareApi.cache.purge.PurgeRequestCloudflareEverything
	(*PurgeReplyCloudflare)(nil),             // 2: cloudflareApi.cache.purge.PurgeReplyCloudflare
}
var file_proto_purge_proto_depIdxs = []int32{
	0, // 0: cloudflareApi.cache.purge.PurgeCloudflare.PurgeCloudflare:input_type -> cloudflareApi.cache.purge.PurgeRequestCloudflare
	1, // 1: cloudflareApi.cache.purge.PurgeCloudflare.PurgeCloudflareEverything:input_type -> cloudflareApi.cache.purge.PurgeRequestCloudflareEverything
	2, // 2: cloudflareApi.cache.purge.PurgeCloudflare.PurgeCloudflare:output_type -> cloudflareApi.cache.purge.PurgeReplyCloudflare
	2, // 3: cloudflareApi.cache.purge.PurgeCloudflare.PurgeCloudflareEverything:output_type -> cloudflareApi.cache.purge.PurgeReplyCloudflare
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_purge_proto_init() }
func file_proto_purge_proto_init() {
	if File_proto_purge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_purge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeRequestCloudflare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_purge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeRequestCloudflareEverything); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_purge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeReplyCloudflare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_purge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_purge_proto_goTypes,
		DependencyIndexes: file_proto_purge_proto_depIdxs,
		MessageInfos:      file_proto_purge_proto_msgTypes,
	}.Build()
	File_proto_purge_proto = out.File
	file_proto_purge_proto_rawDesc = nil
	file_proto_purge_proto_goTypes = nil
	file_proto_purge_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PurgeCloudflareClient is the client API for PurgeCloudflare service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PurgeCloudflareClient interface {
	// Sends a greeting
	PurgeCloudflare(ctx context.Context, in *PurgeRequestCloudflare, opts ...grpc.CallOption) (*PurgeReplyCloudflare, error)
	PurgeCloudflareEverything(ctx context.Context, in *PurgeRequestCloudflareEverything, opts ...grpc.CallOption) (*PurgeReplyCloudflare, error)
}

type purgeCloudflareClient struct {
	cc grpc.ClientConnInterface
}

func NewPurgeCloudflareClient(cc grpc.ClientConnInterface) PurgeCloudflareClient {
	return &purgeCloudflareClient{cc}
}

func (c *purgeCloudflareClient) PurgeCloudflare(ctx context.Context, in *PurgeRequestCloudflare, opts ...grpc.CallOption) (*PurgeReplyCloudflare, error) {
	out := new(PurgeReplyCloudflare)
	err := c.cc.Invoke(ctx, "/cloudflareApi.cache.purge.PurgeCloudflare/PurgeCloudflare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purgeCloudflareClient) PurgeCloudflareEverything(ctx context.Context, in *PurgeRequestCloudflareEverything, opts ...grpc.CallOption) (*PurgeReplyCloudflare, error) {
	out := new(PurgeReplyCloudflare)
	err := c.cc.Invoke(ctx, "/cloudflareApi.cache.purge.PurgeCloudflare/PurgeCloudflareEverything", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurgeCloudflareServer is the server API for PurgeCloudflare service.
type PurgeCloudflareServer interface {
	// Sends a greeting
	PurgeCloudflare(context.Context, *PurgeRequestCloudflare) (*PurgeReplyCloudflare, error)
	PurgeCloudflareEverything(context.Context, *PurgeRequestCloudflareEverything) (*PurgeReplyCloudflare, error)
}

// UnimplementedPurgeCloudflareServer can be embedded to have forward compatible implementations.
type UnimplementedPurgeCloudflareServer struct {
}

func (*UnimplementedPurgeCloudflareServer) PurgeCloudflare(context.Context, *PurgeRequestCloudflare) (*PurgeReplyCloudflare, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeCloudflare not implemented")
}
func (*UnimplementedPurgeCloudflareServer) PurgeCloudflareEverything(context.Context, *PurgeRequestCloudflareEverything) (*PurgeReplyCloudflare, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeCloudflareEverything not implemented")
}

func RegisterPurgeCloudflareServer(s *grpc.Server, srv PurgeCloudflareServer) {
	s.RegisterService(&_PurgeCloudflare_serviceDesc, srv)
}

func _PurgeCloudflare_PurgeCloudflare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRequestCloudflare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurgeCloudflareServer).PurgeCloudflare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudflareApi.cache.purge.PurgeCloudflare/PurgeCloudflare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurgeCloudflareServer).PurgeCloudflare(ctx, req.(*PurgeRequestCloudflare))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurgeCloudflare_PurgeCloudflareEverything_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRequestCloudflareEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurgeCloudflareServer).PurgeCloudflareEverything(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudflareApi.cache.purge.PurgeCloudflare/PurgeCloudflareEverything",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurgeCloudflareServer).PurgeCloudflareEverything(ctx, req.(*PurgeRequestCloudflareEverything))
	}
	return interceptor(ctx, in, info, handler)
}

var _PurgeCloudflare_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudflareApi.cache.purge.PurgeCloudflare",
	HandlerType: (*PurgeCloudflareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PurgeCloudflare",
			Handler:    _PurgeCloudflare_PurgeCloudflare_Handler,
		},
		{
			MethodName: "PurgeCloudflareEverything",
			Handler:    _PurgeCloudflare_PurgeCloudflareEverything_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/purge.proto",
}
